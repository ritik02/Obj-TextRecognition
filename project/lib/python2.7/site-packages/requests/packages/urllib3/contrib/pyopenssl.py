from model import *
from tags import *
import socket
import struct
import json
import sys
import os

def get_tags(cap):
    tags = []
    for word in cap:
        key = word[0]
        ls = l[key]
        for element in ls:
            if element == word:
                tags.append(word)
    return tags

def college():
    json_data = model3.predict([image])
    info = json.dumps(json_data)
    info = json.loads(info)
    dct = info["outputs"][0]
    result = dct['data']['concepts'][0]['name']
    value = dct['data']['concepts'][0]['value']
    if value > 0.2:
        return result
    else:
        result = ""
        return result


# model to detect persons
def identify_persons(image):
    json_data = model2.predict([image])
    info = json.dumps(json_data)
    info = json.loads(info)
    list_of_persons = info['outputs'][0]['data']
    try:
        list_of_persons = list_of_persons['regions']
        persons = len(list_of_persons)
        man, woman = 0, 0

        for i in range(persons):
            lx = list_of_persons[i]['data']['face']['gender_appearance']['concepts']
            if lx[0]['value'] > lx[1]['value']:
                if lx[0]['name'] == 'masculine':
                    man += 1
                else:
                    woman += 1
            elif lx[1]['value'] > lx[0]['value']:
                if lx[1]['name'] == 'masculine':
                    man += 1
                else:
                    woman += 1

        if persons == 1:
            if man == 1:
                x = "There is a man."
            else:
                x = "There is a woman."
        else:
            if man == 1 and woman == 1:
                x = "There is a man and a woman."
            elif man == 1:
                x = "There are " + str(persons) + " persons. One man and " + str(woman) + " women."
            elif woman == 1:
                x = "There are " + str(persons) + " persons. " + str(man) + " men and one woman."
            else:
                x = "There are " + str(persons) + " persons. " + str(man) + " men and " + str(woman) + " women."
    except:
        x = "none"

    return x


# model to detect objects using general model
def captions():
    cap = []
    image = Img(file_obj=open('home.png', 'rb'))
    json_data = model.predict([image])
    info = json.dumps(json_data)
    info = json.loads(info)
    dct = info["outputs"][0]
    results = dct['data']['concepts']
    l = ['person', 'man', 'woman', 'boy', 'girl', 'adult', 'group']
    s, x = "", ""
    print ("The predicted captions for the given image are as follows:")
    #s = college(image)
    #print (s)
    f = 0
    for obj in results:
        if obj['name'] in l and f == 0:
            x = identify_persons(image)
            #print x
            if x == "none":
                x = "".encode()
                cap.append(obj['name'].lower())
            else:
                f = 1
                print (x)
        elif obj['name'] not in l:
            cap.append(obj['name'].lower())

    tags = get_tags(cap)
    if len(tags) > 0:
        s = ""
        for word in tags:
            print (word)
            s = s + word + ". ,"
    '''
    elif len(cap)>0:
        print "No captions matched with general model"
    '''

    client.sendall(x + ". ," + s)
    #os.remove('home.png')


# CREATING SOCKET
HOST = "192.168.43.218"
PORT = 7000
skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    skt.bind((HOST, PORT))
except socket.error as msg:
    print ('Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1])
    sys.exit("Program terminated !!")
skt.listen(5)
print ('SERVER STARTED RUNNING. Press Ctrl+C to terminate the code.')

# READY TO PROCESS..
j = 1

try:
    while True:
        client, address = skt.accept()
        buf = ""
        while len(buf) < 4:
            buf += client.recv(4 - len(buf))
        size = struct.unpack('!i', buf)[0]
        with open('home.png', 'wb') as f:
            while size > 0:
                data = client.recv(1024)
                f.write(data)
                size -= len(data)
        print ("\nImage", j, "Saved")
        j += 1
        captions()
        client.close()

except KeyboardInterrupt:
    sys.exit("Program terminated !!")
